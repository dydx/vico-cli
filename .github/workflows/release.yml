name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  # First job: Build binaries for all platforms
  build-binaries:
    name: Build Binaries
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        include:
          - goarch: amd64
            goos: darwin
            artifact_name: vicohome-darwin-amd64
          - goarch: arm64
            goos: darwin
            artifact_name: vicohome-darwin-arm64
          - goarch: amd64
            goos: linux
            artifact_name: vicohome-linux-amd64
          - goarch: arm64
            goos: linux
            artifact_name: vicohome-linux-arm64
          - goarch: amd64
            goos: windows
            artifact_name: vicohome-windows-amd64.exe
          - goarch: arm64
            goos: windows
            artifact_name: vicohome-windows-arm64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          cache: true

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          go build -ldflags="-X 'github.com/dydx/vico-cli/cmd.Version=${VERSION}'" -o ${{ matrix.artifact_name }} main.go

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ./${{ matrix.artifact_name }}

  # Second job: Build and publish Docker image
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build-binaries
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository_owner }}/vicohome
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest
          labels: |
            org.opencontainers.image.title=Vicohome CLI
            org.opencontainers.image.description=A command-line interface for interacting with the Vicohome API
            org.opencontainers.image.version=${{ env.VERSION }}
            org.opencontainers.image.licenses=MIT

      - name: Build and push multi-platform Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.multi
          push: true
          platforms: linux/amd64,linux/arm64
          build-args: |
            VERSION=${{ env.VERSION }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          
      - name: Test Docker image
        run: |
          # Pull and test the image once it's available
          docker run --rm ghcr.io/${{ github.repository_owner }}/vicohome:latest version
      
      - name: Create Docker info file
        run: |
          cat > docker-info.md << EOF
          ## Docker Image
          
          Multi-architecture Docker image (amd64, arm64) is available:
          
          \`\`\`bash
          docker pull ghcr.io/${{ github.repository_owner }}/vicohome:${{ env.VERSION }}
          docker pull ghcr.io/${{ github.repository_owner }}/vicohome:latest
          \`\`\`
          
          Run it:
          
          \`\`\`bash
          docker run --rm ghcr.io/${{ github.repository_owner }}/vicohome:latest version
          \`\`\`
          EOF
      
      - name: Upload Docker info
        uses: actions/upload-artifact@v4
        with:
          name: docker-info
          path: ./docker-info.md

  # Third job: Create GitHub release with all assets
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-binaries, build-docker]
    permissions:
      contents: write
      packages: read
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      
      - name: Get version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      
      - name: Prepare release body
        run: |
          # Start with an empty release body
          echo "## Vicohome CLI ${{ env.VERSION }}" > release-body.md
          echo "" >> release-body.md
          echo "### Installation" >> release-body.md
          echo "" >> release-body.md
          echo "Download the binary for your platform and architecture." >> release-body.md
          echo "" >> release-body.md
          
          # Add the Docker info
          cat ./artifacts/docker-info/docker-info.md >> release-body.md
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          name: Release ${{ env.VERSION }}
          body_path: release-body.md
          draft: false
          prerelease: false
          files: |
            ./artifacts/vicohome-darwin-amd64/vicohome-darwin-amd64
            ./artifacts/vicohome-darwin-arm64/vicohome-darwin-arm64
            ./artifacts/vicohome-linux-amd64/vicohome-linux-amd64
            ./artifacts/vicohome-linux-arm64/vicohome-linux-arm64
            ./artifacts/vicohome-windows-amd64.exe/vicohome-windows-amd64.exe
            ./artifacts/vicohome-windows-arm64.exe/vicohome-windows-arm64.exe